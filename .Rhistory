plot1 = histogram(~log_est_grad_pmw, subset(data_icame, morphology_detail == "y_suffix"), nint=30, col="grey",
# par.settings=temp_my_settings, axis=axis_L,
type="count",
scales=list(x=list(at=log(c(1, 10, 100, 1000, 10000)/100000000), label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, 50, 100, 150))), xlim=log(c(0.006, 200)/1000000), ylim=c(0, 135),
xlab="Token frequency", ylab="Number of adjectives")
# cairo_pdf(file = "./figures/schema_y_token_frequency_of_types.pdf", height=2, width=2)
print(plot1)
# dev.off()
# Overview: degree marking by gradation frequency
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
data_icame_no_participles$est_prop_more
# Overview: degree marking by gradation frequency
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
# Overview: degree marking by gradation frequency
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
# Overview: degree marking by gradation frequency
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
# Overview: degree marking by gradation frequency
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
data_icame_no_participles$est_prop_more_jitter <- jitter(data_icame_no_participles$est_prop_more, 100)
# add jitter
set.seed(1138)
data_icame_no_participles$est_prop_more_jitter <- jitter(data_icame_no_participles$est_prop_more, 100)
set.seed(1985)
data_icame_no_participles$log_rate_z_jitter <- jitter(data_icame_no_participles$log_rate_z, 400)
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
?xyplot
plot(data_icame_no_participles$est_prop_more_jitter,
data_icame_no_participles$log_rate_z_jitter,
type = "n")
text(data_icame_no_participles$est_prop_more_jitter,
data_icame_no_participles$log_rate_z_jitter,
data_icame_no_participles$type)
data_icame_no_participles$type
plot(data_icame_no_participles$est_prop_more_jitter,
data_icame_no_participles$log_rate_z_jitter,
type = "p")
plot(data_icame_no_participles$log_rate_z_jitter,
data_icame_no_participles$est_prop_more_jitter,
type = "p")
plot(data_icame_no_participles$log_rate_z_jitter,
data_icame_no_participles$est_prop_more_jitter,
type = "n")
text(data_icame_no_participles$log_rate_z_jitter,
data_icame_no_participles$est_prop_more_jitter,
data_icame_no_participles$type)
library(ggplot2)
library(shiny)
library(plotly)
ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
label = type)) + geom_text()
ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
label = type)) + geom_text() +
theme_bw()
p1 <- ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
label = type)) + geom_text() +
theme_bw()
pplotly(p1)
ggplotly(p1)
?ggplotly
ggplotly(p1, tooltip = "type")
p1
data_icame_no_participles
data_icame_no_participles$combinations
p1 <- ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
color = combinations,
label = type)) + geom_text() +
theme_bw()
ggplotly(p1, tooltip = "type")
p1 <- ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
color = combinations,
label = type)) + geom_text() +
scale_fill_brewer() +
theme_bw()
?terrain
?terrain.colors
terrain.colors(17)
p1 <- ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
color = combinations,
label = type)) + geom_text() +
scale_fill_manual(values = terrain.colors(17)) +
theme_bw()
ggplotly(p1, tooltip = "type")
?terrain.colors
p1 <- ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
color = combinations,
label = type)) + geom_text() +
theme_bw() +
scale_fill_manual(values = terrain.colors(17))
p1
ggplotly(p1, tooltip = "type")
ggplotly(p1, tooltip = "type") +
scale_fill_manual(values = terrain.colors(17))
library(htmlwidgets)
p2 <- ggplotly(p1, tooltip = "type")
saveWidget(as.widget(p2), "comparatives.html")
p1 <- ggplot(data_icame_no_participles,
aes(x = log_rate_z_jitter,
y = est_prop_more_jitter,
color = combinations,
label = type)) + geom_text() +
theme_bw() +
scale_fill_manual(values = terrain.colors(17)) +
ylab("Proportion of more") +
xlab("Log gradation frequency")
p2 <- ggplotly(p1, tooltip = "type")
saveWidget(as.widget(p2), "comparatives.html")
# model ICAME
# load packages -----------------------------------------------------------
# install CRAN packages (if not yet installed)
sapply(c("lattice", "latticeExtra", "brms"), function(x)
if(!is.element(x, installed.packages())) install.packages(x, dependencies = T))
library(brms)
library(lattice)
library(latticeExtra)
# data wrangling ----------------------------------------------------------
# Read in data
data_icame <- read.csv("../../Data/Data for ICAME/data_icame.csv")
str(data_icame)
# Data clean-up
#---------------------------------------------------
# remove participle forms
data_icame_no_participles <- subset(data_icame, morphology_groups != "ed_participle" & morphology_groups != "ing_participle")
data_icame_no_participles <- droplevels(data_icame_no_participles)
# Number of syllables: Reduce to factor with three levels: 1, 2, 3+
data_icame_no_participles$n_syl_factor2 <- factor(ifelse(data_icame_no_participles$n_syll == 1, "1", ifelse(data_icame_no_participles$n_syll == 2, "2", "3+")))
str(data_icame_no_participles)
# Extrapolated counts: Convert to integers (for modeling)
data_icame_no_participles$est_er_grad_freq   <- as.integer(round(data_icame_no_participles$est_er_grad_freq, 0))
data_icame_no_participles$est_more_grad_freq <- as.integer(round(data_icame_no_participles$est_more_grad_freq, 0))
# Gradation frequency: Transform to log scale, then standardize to z-scores
data_icame_no_participles$log_rate_z <- as.numeric(scale(data_icame_no_participles$log_est_grad_pmw))
# Create a new variable for the phonological subgroups (number of syllables x final segment)
data_icame_no_participles$combinations <- factor(paste(as.character(data_icame_no_participles$n_syl_factor2), as.character(data_icame_no_participles$final_segments_class), sep = "_") )
# Data inspection
#----------------------------------------------------
# Overview of phonological subgroups
xtabs(~n_syl_factor2+final_segments_class, data_icame_no_participles)
# Gradation frequency
histogram(data_icame_no_participles$log_rate_z)
# -er
plot1 = histogram(log(data_icame$est_er_grad_freq),
nint=50, col="grey",
#par.settings=temp_my_settings, axis=axis_L,
type="count",
scales=list(x=list(at=log(c(1, 10, 100, 1000, 10000)), label=c(1, 10, 100, 1000, 10000)),
y=list(at=c(0, 50, 100, 150))), xlim=c(-.5, log(40000)), ylim=c(0, NA),
xlab="Frequency in the BNC", ylab="Number of adjectives")
# cairo_pdf(file = "./figures/frequency_er_BNC.pdf", height=3, width=3)
print(plot1)
# dev.off()
# more
plot1 = histogram(log(data_icame$est_more_grad_freq), nint=50, col="grey",
#par.settings=temp_my_settings,
# axis=axis_L,
type="count",
scales=list(x=list(at=log(c(1, 10, 100, 1000, 10000)), label=c(1, 10, 100, 1000, 10000)),
y=list(at=c(0, 150, 500, 1000))), xlim=c(-.5, log(40000)), ylim=c(0, 1150),
xlab="Frequency in the BNC", ylab="Number of adjectives")
#cairo_pdf(file = "./figures/frequency_more_BNC.pdf", height=3, width=3)
print(plot1)
#dev.off()
# Model
#----------------------------------------------------
# Logistic regression model with (too) weak priors
# m_new_2 = brm(est_more_grad_freq | trials(est_er_grad_freq +
#                                             est_more_grad_freq) ~
#       # in brms, "success | trials(success + failure)" is
#       # equivalent to "cbind(success + failure)" in glm(er)
#                 log_rate_z*combinations + (1|type),
#             data=data_icame_no_participles,
#             family=binomial,
#             warmup=500, iter=2000, chains=4, cores=4,
#             prior=c(set_prior("normal(0,5)", class="b"),
#                     set_prior("normal(0,5)", class="sd")))
#
# saveRDS(m_new_2, "./models/m_new_2.rds")
m_new_2 <- readRDS("../brms model/m_new_2.rds")
# null model
# m_null = brm(est_more_grad_freq | trials(est_er_grad_freq +
#                                             est_more_grad_freq) ~
#                (1|type),
#             data=data_icame_no_participles,
#             family=binomial,
#             warmup=500, iter=2000, chains=4, cores=4)
#
# Compute posterior estimates
#----------------------------------------------------
# Extarct posterior samples from model
post <- posterior_samples(m_new_2)
str(post)
# Posterior estimates of interest: Gradation frequency trend
# for each phonological subgroup
# Array map:
#     6 --- n = 5 quantiles from the posterior distribution (.025, .25, .5, .75, .975), i.e. the median + 50% and 95% uncertainty interval, everything on the proportion (of more) scale
#   100 --- steps along the gradation frequency range to obtain a sufficiently dense sequence of estimates
#    17 --- number of phonological subgroups
estimates_array = array(NA, dim = c(6, 100, nlevels(data_icame_no_participles$combinations)))
str(estimates_array)
n_combinations = nlevels(data_icame_no_participles$combinations)
range(data_icame_no_participles$log_rate_z)
# fill up array with estimates
for(i in 1:n_combinations){
x_range <- range(subset(data_icame_no_participles, combinations == levels(data_icame_no_participles$combinations)[i])$log_rate_z)
x_seq <- seq(x_range[1], x_range[2], length.out=100)
if(i == 1) {
estimates_array[1:5,,i] <- plogis(apply(as.matrix(post[,c(1,2)]) %*% rbind(1, x_seq), 2, quantile, c(.025, .25, .5, .75, .975)))
estimates_array[  6,,i] <- x_seq
}
else {
estimates_array[1:5,,i] <- plogis(apply(as.matrix(post[,c(1,2, 1+i, n_combinations+i)]) %*% rbind(1, x_seq, 1, x_seq), 2, quantile, c(.025, .25, .5, .75, .975)))
estimates_array[  6,,i] <- x_seq
}
}
# Visualization
#----------------------------------------------------
# source("./r_utils/my_settings.R")
# temp_my_settings = my_settings
# temp_my_settings$layout.heights$bottom.padding = 1
# Overview: degree marking by gradation frequency
# add jitter
set.seed(1138)
data_icame_no_participles$est_prop_more_jitter <- jitter(data_icame_no_participles$est_prop_more, 100)
set.seed(1985)
data_icame_no_participles$log_rate_z_jitter <- jitter(data_icame_no_participles$log_rate_z, 400)
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
xyplot(
jitter(est_prop_more, 100) ~ jitter(log_rate_z, 400),
data=data_icame_no_participles, xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.2, cex=.5,
# par.settings=temp_my_settings, axis=axis_L,
xlab="Log gradation frequency", ylab="Proportion of more",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y,...){
panel.abline(v=(log(6/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw), col="grey")
panel.xyplot(x,y,...)
})
log(6)
# add jitter
set.seed(1138)
data_icame_no_participles$est_prop_more_jitter <- jitter(data_icame_no_participles$est_prop_more, 100)
set.seed(1985)
data_icame_no_participles$log_rate_z_jitter <- jitter(data_icame_no_participles$log_rate_z, 400)
data_icame_no_participles$log_est_grad_pmw
data_icame_no_participles$est_er_grad_freq
log(data_icame_no_participles$est_er_grad_freq)
data_icame_no_participles$log_est_grad_pmw
# Overview of trends grouped by number of syllables
plot_1_syllable <-
xyplot(
jitter(est_prop_more, amount=.025) ~ jitter(log_rate_z, amount=.09), data=subset(data_icame_no_participles, combinations=="1_cluster"), xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05), type="n",
# par.settings=temp_my_settings, axis=axis_L,
xlab=list(cex=.8, label="Log gradation frequency"), ylab=list(cex=.8, label="Proportion of more"),
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y, subscripts,...){
panel.points(x=estimates_array[6,,1], y=estimates_array[3,,1], type="l", col=1)
panel.points(x=estimates_array[6,,2], y=estimates_array[3,,2], type="l", col="darkgrey")
panel.points(x=estimates_array[6,,3], y=estimates_array[3,,3], type="l", col=1, lty=2)
panel.points(x=estimates_array[6,,4], y=estimates_array[3,,4], type="l", col="darkgrey")
panel.points(x=c(-.43, .4, .08, -.3), y=c(.89, .32, .35, .22), pch=16, col="white", cex=1)
panel.text(x=-.45, y=.9, label="cluster", adj=0, cex=.8)
panel.text(x=.4, y=.32, label="l", col="darkgrey", adj=0, cex=.8)
panel.text(x=0.1, y=.35, label="other", adj=1, cex=.8)
panel.text(x=-.3, y=.22, label="r", col="darkgrey", adj=0, cex=.8)
})
plot_1_syllable
# cairo_pdf("./figures/ICAME40_results_1_syllable.eps", width=7, height=2)
print(plot_1_syllable, position=c(0,0,.36,1), more=T)
print(plot_2_syllable, position=c(.34, 0, .67, 1), more=T)
print(plot_3_syllable, position=c(.67, 0, 1, 1))
plot_2_syllable <-
xyplot(
jitter(est_prop_more, amount=.025) ~ jitter(log_rate_z, amount=.09), data=subset(data_icame_no_participles, combinations=="1_cluster"), xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05), type="n",
# par.settings=temp_my_settings, axis=axis_L,
xlab=list(cex=.8, label=" "), ylab=list(cex=.8, label=" "),
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1), lab=NULL)),
panel=function(x,y, subscripts,...){
panel.points(x=estimates_array[6,,5], y=estimates_array[3,,5], type="l", col=1)
panel.points(x=estimates_array[6,,6], y=estimates_array[3,,6], type="l", col=1)
panel.points(x=estimates_array[6,,7], y=estimates_array[3,,7], type="l", col=1)
panel.points(x=estimates_array[6,,8], y=estimates_array[3,,8], type="l", col=1)
panel.points(x=estimates_array[6,,9], y=estimates_array[3,,9], type="l", col=1)
panel.points(x=estimates_array[6,,10], y=estimates_array[3,,10], type="l", col=1, lty=2)
panel.text(x=c(0, .5), y=c(.25, .6), label=c("-y", "-ly"))
})
plot_3_syllable <-
xyplot(
jitter(est_prop_more, amount=.025) ~ jitter(log_rate_z, amount=.09), data=subset(data_icame_no_participles, combinations=="1_cluster"), xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05), type="n",
# par.settings=temp_my_settings, axis=axis_L,
xlab=list(cex=.8, label=" "), ylab=list(cex=.8, label=" "),
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1), lab=NULL)),
panel=function(x,y, subscripts,...){
panel.points(x=estimates_array[6,,11], y=estimates_array[3,,11], type="l", col=1)
panel.points(x=estimates_array[6,,12], y=estimates_array[3,,12], type="l", col=1)
panel.points(x=estimates_array[6,,13], y=estimates_array[3,,13], type="l", col=1)
panel.points(x=estimates_array[6,,14], y=estimates_array[3,,14], type="l", col=1)
panel.points(x=estimates_array[6,,15], y=estimates_array[3,,15], type="l", col=1)
panel.points(x=estimates_array[6,,16], y=estimates_array[3,,16], type="l", col=1, lty=2)
panel.points(x=estimates_array[6,,17], y=estimates_array[3,,17], type="l", col=1, lty=2)
panel.text(x=1.2, y=.8, label="-y")
})
# cairo_pdf("./figures/ICAME40_results_1_syllable.eps", width=7, height=2)
print(plot_1_syllable, position=c(0,0,.36,1), more=T)
print(plot_2_syllable, position=c(.34, 0, .67, 1), more=T)
print(plot_3_syllable, position=c(.67, 0, 1, 1))
# individual conditions
histogram(data_icame_no_participles$log_rate_z)
# cluster
plot_1_cluster <- xyplot(
jitter(est_prop_more, amount=.025) ~ jitter(log_rate_z, amount=.09), data=subset(data_icame_no_participles, combinations=="1_cluster"), xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05),
col=1, alpha=.33, cex=.5,
# par.settings=my_settings, axis=axis_L,
xlab=" ", ylab=" ",
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100))),
panel=function(x,y, subscripts,...){
panel.polygon(x=c(estimates_array[6,,1], rev(estimates_array[6,,1])), y=c(estimates_array[1,,1], rev(estimates_array[5,,1])), border=F, col="grey90")
panel.polygon(x=c(estimates_array[6,,1], rev(estimates_array[6,,1])), y=c(estimates_array[2,,1], rev(estimates_array[4,,1])), border=F, col="grey80")
panel.xyplot(x,y,type="smooth", lty=2, col="grey50")
panel.points(x=estimates_array[6,,1], y=estimates_array[3,,1], type="l", col=1)
panel.xyplot(x,y,...)
panel.text(x=-1.2, y=1.15, label=paste0("n = ", nrow(subset(data_icame_no_participles, combinations=="1_cluster"))), adj=0, cex=.8, col="darkgrey")
})
plot_1_cluster
?array
str(estimates_array)
array(NA, dim = c(6, 100, nlevels(data_icame_no_participles$combinations))
)
?range
?'%*%*'
plogis(apply(as.matrix(post[,c(1,2)]) %*% rbind(1, x_seq), 2, quantile, c(.025, .25, .5, .75, .975)))
x_seq
quantile()
range(subset(data_icame_no_participles, combinations == levels(data_icame_no_participles$combinations)[1])$log_rate_z)
seq(x_range[1], x_range[2], length.out=100)
i = 1
x_range <- range(subset(data_icame_no_participles, combinations == levels(data_icame_no_participles$combinations)[i])$log_rate_z)
x_seq <- seq(x_range[1], x_range[2], length.out=100)
post
post[,c(1,2)]
plogis(apply(as.matrix(post[,c(1,2)]) %*% rbind(1, x_seq), 2, quantile, c(.025, .25, .5, .75, .975)))
x_seq
estimates_array[1:5,,1]
estimates_array[1:5,1,1]
estimates_array[1:5,,1]
estimates_array[,,1]
post
post[[1]]
str(post)
head(post[,c(1,2)])
nrow(head(post[,c(1,2)]))
nrow(post[,c(1,2)])
View(m_new_2)
head(estimates_array)
str(estimates_array)
as.matrix(estimates_array)
str(estimates_array)
estimates_array[1,,]
estimates_array[2,,]
estimates_array[6,,]
estimates_array[6,1,]
estimates_array[5,1,]
estimates_array[5,2,]
estimates_array[1,2,]
estimates_array[6,2,]
estimates_array[3,2,]
# Overview of trends grouped by number of syllables
plot_1_syllable <-
xyplot(
jitter(est_prop_more, amount=.025) ~ jitter(log_rate_z, amount=.09), data=subset(data_icame_no_participles, combinations=="1_cluster"), xlim=c(-1.2, 4.9),ylim=c(-.05, 1.05), type="n",
# par.settings=temp_my_settings, axis=axis_L,
xlab=list(cex=.8, label="Log gradation frequency"), ylab=list(cex=.8, label="Proportion of more"),
scales=list(x=list(at=(log(c(0.01, 0.1, 1, 10, 100)/1000000)-mean(data_icame_no_participles$log_est_grad_pmw)) / sd(data_icame_no_participles$log_est_grad_pmw),
label=c(0.01, 0.1, 1, 10, 100)),
y=list(at=c(0, .5, 1))),
panel=function(x,y, subscripts,...){
panel.points(x=estimates_array[6,,1], y=estimates_array[3,,1], type="l", col=1)
panel.points(x=estimates_array[6,,2], y=estimates_array[3,,2], type="l", col="darkgrey")
panel.points(x=estimates_array[6,,3], y=estimates_array[3,,3], type="l", col=1, lty=2)
panel.points(x=estimates_array[6,,4], y=estimates_array[3,,4], type="l", col="darkgrey")
panel.points(x=c(-.43, .4, .08, -.3), y=c(.89, .32, .35, .22), pch=16, col="white", cex=1)
panel.text(x=-.45, y=.9, label="cluster", adj=0, cex=.8)
panel.text(x=.4, y=.32, label="l", col="darkgrey", adj=0, cex=.8)
panel.text(x=0.1, y=.35, label="other", adj=1, cex=.8)
panel.text(x=-.3, y=.22, label="r", col="darkgrey", adj=0, cex=.8)
})
print(plot_1_syllable)
?panel.xyplot
str(estimates_array)
estimates_array[1,,]
estimates_array[1,,1]
estimates_array[1,1,1]
estimates_array[1,100,1]
plot(estimates_array[1,100,1])
plot(estimates_array[1,1:100,1])
lines(estimates_array[1,1:100,6])
plot(estimates_array[1,1:100,1])
lines(estimates_array[2,1:100,1])
lines(estimates_array[3,1:100,1])
lines(estimates_array[4,1:100,1])
lines(estimates_array[5,1:100,1])
lines(estimates_array[6,1:100,1])
estimates_array[6,1,1]
estimates_array[6,2,1]
estimates_array[6,100,1]
